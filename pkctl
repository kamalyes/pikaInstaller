#!/bin/bash
action=$1
target=$2
args=$@

source ~/.pkrc > /dev/null
PK_BASE=${PK_BASE:-/opt}
COMPOSE_FILES=$(cat ${PK_BASE}/compose_files 2>/dev/null || echo "")
source ${PK_BASE}/install.conf
export COMPOSE_HTTP_TIMEOUT=180

function usage() {
   echo "Pika 控制脚本"
   echo
   echo "Usage: "
   echo "  ./pkctl.sh [COMMAND] [ARGS...]"
   echo "  ./pkctl.sh --help"
   echo
   echo "Commands: "
   echo "  status    查看 Pika 服务运行状态"
   echo "  start     启动 Pika 服务"
   echo "  stop      停止 Pika 服务"
   echo "  restart   重启 Pika 服务"
   echo "  reload    重新加载 Pika 服务"
   echo "  upgrade   升级 Pika 至最新版本"
   echo "  upgrade [RELEASE]  根据版本号搜索离线包，升级 Pika 至对应版本"
   echo "  uninstall 卸载 Pika 服务"
   echo "  version   查看 Pika 版本信息"
}

function generate_compose_files() {
   compose_files="-f docker-compose-base.yml"
#   case ${PK_INSTALL_MODE} in
#   allinone)
#      compose_files="${compose_files} -f docker-compose-server.yml"
#      ;;
#   server)
#      compose_files="${compose_files} -f docker-compose-server.yml"
#      ;;
#   *)
#      log "... 不支持的安装模式，请从 [ allinone | server ] 中进行选择"
#      ;;
#   esac
   # 是否使用外部数据库
    if [ ${PK_EXTERNAL_MYSQL} = "false" ]; then
       mkdir -p ${PK_BASE}/data/mysql
       chmod 655 ${PK_BASE}/conf/my.cnf
       compose_files="${compose_files} -f docker-compose-mysql.yml"
    fi
    # 是否使用外部 Kafka
    if [ ${PK_EXTERNAL_KAFKA} = "false" ]; then
       mkdir -p ${PK_BASE}/data/kafka
       mkdir -p ${PK_BASE}/data/zookeeper
       compose_files="${compose_files} -f docker-compose-kafka.yml"
    fi
    # 是否使用外部 Prometheus
    if [ ${PK_EXTERNAL_PROM} = "false" ]; then
       mkdir -p ${PK_BASE}/data/prometheus
       compose_files="${compose_files} -f docker-compose-prometheus.yml"
    fi
    # 是否使用外部 Redis
    if [ ${PK_EXTERNAL_REDIS} = "false" ]; then
       mkdir -p ${PK_BASE}/data/redis
       compose_files="${compose_files} -f docker-compose-redis.yml"
    fi
   echo ${compose_files} >${PK_BASE}/compose_files
   chmod +rw -R ${PK_BASE}
   COMPOSE_FILES=$(cat ${PK_BASE}/compose_files 2>/dev/null || echo "")
}

function status() {
   echo
   cd ${PK_BASE}
   docker-compose ${COMPOSE_FILES} ps
}
function start() {
   echo
   cd ${PK_BASE}
   docker-compose ${COMPOSE_FILES} start ${target}
}
function stop() {
   echo
   cd ${PK_BASE}
   docker-compose ${COMPOSE_FILES} stop ${target}
}
function restart() {
   echo
   cd ${PK_BASE}
   docker-compose ${COMPOSE_FILES} stop  ${target}
   docker-compose ${COMPOSE_FILES} start ${target}
}
function reload() {
   echo
   cd ${PK_BASE}
   docker-compose ${COMPOSE_FILES} up -d --remove-orphans
}
function uninstall() {
   echo
   cd ${PK_BASE}
   docker-compose ${COMPOSE_FILES} down ${target}
}
function version() {
   echo
   cat ${PK_BASE}/version
}

function main() {
   case "${action}" in
   status)
      status
      ;;
   start)
      start
      ;;
   stop)
      stop
      ;;
   restart)
      restart
      ;;
   reload)
      generate_compose_files
      reload
      ;;
   upgrade)
      upgrade
      ;;
   uninstall)
      uninstall
      ;;
   version)
      version
      ;;
   help)
      usage
      ;;
   --help)
      usage
      ;;
   generate_compose_files)
      generate_compose_files
      ;;
   *)
      echo
      cd ${PK_BASE}
      docker-compose ${COMPOSE_FILES} $@
      ;;
   esac
}
main $@
